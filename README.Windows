Building OpenOCD for Windows
----------------------------

You can build OpenOCD for Windows natively with either MinGW-w64/MSYS
or Cygwin (plain MinGW might work with --disable-werror but is not
recommended as it doesn't provide enough C99 compatibility).
Alternatively, one can cross-compile it using MinGW-w64 on a *nix
host. See README for the generic instructions.

Also, the MSYS2 project provides both ready-made binaries and an easy
way to self-compile from their software repository out of the box.

Native MinGW-w64/MSYS compilation
-----------------------------

As MSYS doesn't come with pkg-config pre-installed, you need to add it
manually. The easiest way to do that is to download pkg-config-lite
from:

  http://sourceforge.net/projects/pkgconfiglite/

Then simply unzip the archive to the root directory of your MinGW-w64
installation.

USB adapters
------------

For the adapters that use a HID-based protocol, e.g. CMSIS-DAP, you do
not need to perform any additional configuration.

For all the others you usually need to have WinUSB.sys (or
libusbK.sys) driver installed. Some vendor software (e.g. for
ST-LINKv2) does it on its own. For the other cases the easiest way to
assign WinUSB to a device is to use the latest Zadig installer:

  http://zadig.akeo.ie

When using a composite USB device, it's often necessary to assign
WinUSB.sys to the composite parent instead of the specific
interface. To do that one needs to activate an advanced option in the
Zadig installer.

If you need to use the same adapter with other applications that may
require another driver, a solution for Windows Vista and above is to
activate the IgnoreHWSerNum registry setting for the USB device.

That setting forces Windows to associate the driver per port instead of
per serial number, the same behaviour as when the device does not contain
a serial number. So different drivers can be installed for the adapter on
different ports and you just need to plug the adapter into the correct
port depending on which application to use.

For more information, see:

  https://learn.microsoft.com/en-us/windows-hardware/drivers/usbcon/usb-device-specific-registry-settings
  http://www.ftdichip.com/Support/Knowledgebase/index.html?ignorehardwareserialnumber.htm

# Windows 环境下从源码编译 OpenOCD
********************************

#### 注意
本文介绍了如何从 OpenOCD 源文件构建二进制文件
如果您想要更快速地构建,也可以从[GitHub](https://github.com/coflery/openocd/releases)
直接下载 OpenOCD 的预构建二进制文件,而无需自己编译

#### 注意
本文涉及的命令行操作均在装有 MINGW32 子系统的 MSYS2 shell 环境中进行了验证


## 安装依赖的软件包

### 安装编译 OpenOCD 所需的软件包
```
pacman -S --noconfirm --needed autoconf automake git make p7zip libtool \
mingw-w64-i686-pkg-config \
mingw-w64-i686-gcc \
mingw-w64-i686-libusb \
mingw-w64-i686-libftdi \
mingw-w64-i686-libjaylink-git
```
### GDB等工具(可选)
```
pacman -S --noconfirm --needed mingw-w64-i686-toolchain
```

### 下载 OpenOCD 源码
```
cd ~
git clone --recursive https://github.com/coflery/openocd.git
```
克隆后的源代码保存在 ``~/openocd`` 目录下


### 下载 libusb
构建 OpenOCD 需使用 libusb 库
请执行以下命令来下载特定版本的 libusb,并将其解压至当前目录

```
wget https://github.com/libusb/libusb/releases/download/v1.0.25/libusb-1.0.25.7z
7z x -olibusb ./libusb-1.0.25.7z
```


现在需要导出以下变量,以便将 libusb 库与 OpenOCD 构建相关联
```
export CPPFLAGS="$CPPFLAGS -I${PWD}/libusb/include/libusb-1.0"
export LDFLAGS="$LDFLAGS -L${PWD}/libusb/MinGW32/dll"
```

## 构建 OpenOCD

配置和构建 OpenOCD,请参考以下命令:

```
cd ~/openocd
export CPPFLAGS="$CPPFLAGS -D__USE_MINGW_ANSI_STDIO=1 -Wno-error"; export CFLAGS="$CFLAGS -Wno-error"
./bootstrap
./configure --build=i686-w64-mingw32 --host=i686-w64-mingw32
make
cp ../libusb/MinGW32/dll/libusb-1.0.dll ./src
cp /opt/i686-w64-mingw32/bin/libwinpthread-1.dll ./src
```

构建完成后,OpenOCD 的二进制文件将被保存于 ``~/openocd/src/`` 目录下

您也可以调用 ``make install``,将其复制到指定位置

- 您可以在配置 OpenOCD 时指定这一位置,也可以在调用 ``make install`` 前设置 ``export DESTDIR="/custom/install/dir"``
- 如果您已经安装过其他开发平台的 OpenOCD,请跳过此步骤,否则原来的 OpenOCD 可能会被覆盖

* 如果发生错误,请解决后再次尝试编译,直到 ``make`` 成功为止
* 如果 OpenOCD 存在子模块问题,请 ``cd`` 到 ``openocd`` 目录,并输入 ``git submodule update --init`` 命令
* 如果 ``./configure`` 成功运行,JTAG 被使能的信息会被打印在 ``OpenOCD configuration summary`` 下面
* 如果您的设备信息未显示在日志中,请根据 ``../openocd/doc/INSTALL.txt`` 文中的描述使用 ``./configure`` 启用它
* 有关编译 OpenOCD 的详细信息,请参阅 ``openocd/README.Windows``
* 请记得将 `libusb-1.0.dll` 和 `libwinpthread-1.dll` 从 ``~/openocd/src`` 复制到 `OOCD_INSTALLDIR/bin`

一旦 ``make`` 过程完成,OpenOCD 的可执行文件会被保存到 ``~/openocd/src/openocd`` 目录下


## 完整编译过程

OpenOCD 编译过程中所调用的所有命令都已包含在以下代码片段中,您可以将其复制到 shell 脚本中,以便快速执行:

```
pacman -S --noconfirm --needed autoconf automake git make mingw-w64-i686-gcc mingw-w64-i686-toolchain mingw-w64-i686-libtool mingw-w64-i686-pkg-config mingw-w64-cross-winpthreads-git p7zip
cd ~
git clone --recursive https://github.com/coflery/openocd.git

wget https://github.com/libusb/libusb/releases/download/v1.0.25/libusb-1.0.25.7z
7z x -olibusb ./libusb-1.0.25.7z
export CPPFLAGS="$CPPFLAGS -I${PWD}/libusb/include/libusb-1.0"; export LDFLAGS="$LDFLAGS -L${PWD}/libusb/MinGW32/.libs/dll"

export CPPFLAGS="$CPPFLAGS -D__USE_MINGW_ANSI_STDIO=1 -Wno-error"; export CFLAGS="$CFLAGS -Wno-error"
cd ~/openocd
./bootstrap
./configure --build=i686-w64-mingw32 --host=i686-w64-mingw32
make
cp ../libusb/MinGW32/dll/libusb-1.0.dll ./src
cp /opt/i686-w64-mingw32/bin/libwinpthread-1.dll ./src

# # optional
# export DESTDIR="$PWD"
# make install
# cp ./src/libusb-1.0.dll $DESTDIR/mingw32/bin
# cp ./src/libwinpthread-1.dll $DESTDIR/mingw32/bin
```