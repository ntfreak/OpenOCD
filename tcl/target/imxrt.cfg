if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME imxrt
}

source [find mem_helper.tcl]

# ---------------------------------------------- Auxiliary functions for accessing i.MXRT registers ----------------------------------------------
proc init_sdram_rt1052 {} {
    # Enable all clocks
    mww 0x400FC068 0xFFFFFFFF
    mww 0x400FC06C 0xFFFFFFFF
    mww 0x400FC070 0xFFFFFFFF
    mww 0x400FC074 0xFFFFFFFF
    mww 0x400FC078 0xFFFFFFFF
    mww 0x400FC07C 0xFFFFFFFF
    mww 0x400FC080 0xFFFFFFFF
    # 
    mww 0x400D8030 0x00002001
    mww 0x400D8100 0x001D0000
    mww 0x400FC014 0x00010D40
    echo "Clock Init Done"
    # ======================================================== 
    # Set SDRAM  
    # Config IOMUX for SDRAM - EMC_00 to EMC_41
    mww 0x401F8014 0x0
    mww 0x401F8018 0x0
    mww 0x401F801C 0x0
    mww 0x401F8020 0x0
    mww 0x401F8024 0x0
    mww 0x401F8028 0x0
    mww 0x401F802C 0x0
    mww 0x401F8030 0x0
    mww 0x401F8034 0x0
    mww 0x401F8038 0x0
    mww 0x401F803C 0x0
    mww 0x401F8040 0x0
    mww 0x401F8044 0x0
    mww 0x401F8048 0x0
    mww 0x401F804C 0x0
    mww 0x401F8050 0x0
    mww 0x401F8054 0x0
    mww 0x401F8058 0x0
    mww 0x401F805C 0x0
    mww 0x401F8060 0x0
    mww 0x401F8064 0x0
    mww 0x401F8068 0x0
    mww 0x401F806C 0x0
    mww 0x401F8070 0x0
    mww 0x401F8074 0x0
    mww 0x401F8078 0x0
    mww 0x401F807C 0x0
    mww 0x401F8080 0x0
    mww 0x401F8084 0x0
    mww 0x401F8088 0x0
    mww 0x401F808C 0x0
    mww 0x401F8090 0x0
    mww 0x401F8094 0x0
    mww 0x401F8098 0x0
    mww 0x401F809C 0x0
    mww 0x401F80A0 0x0
    mww 0x401F80A4 0x0
    mww 0x401F80A8 0x0
    mww 0x401F80AC 0x0
    # DQS PIN, enable SION
    mww 0x401F80B0 0x10
    mww 0x401F80B4 0x0
    mww 0x401F80B8 0x0
    #  PAD ctrl
    # drive strength = 0x7 to increase otherwise the data 7 bit may fail
    # EMC_00 to EMC_41
    #
    mww 0x401F8204 0x000110F9
    mww 0x401F8208 0x000110F9
    mww 0x401F820C 0x000110F9
    mww 0x401F8210 0x000110F9
    mww 0x401F8214 0x000110F9
    mww 0x401F8218 0x000110F9
    mww 0x401F821C 0x000110F9
    mww 0x401F8220 0x000110F9
    mww 0x401F8224 0x000110F9
    mww 0x401F8228 0x000110F9
    mww 0x401F822C 0x000110F9
    mww 0x401F8230 0x000110F9
    mww 0x401F8234 0x000110F9
    mww 0x401F8238 0x000110F9
    mww 0x401F823C 0x000110F9
    mww 0x401F8240 0x000110F9
    mww 0x401F8244 0x000110F9
    mww 0x401F8248 0x000110F9
    mww 0x401F824C 0x000110F9
    mww 0x401F8250 0x000110F9
    mww 0x401F8254 0x000110F9
    mww 0x401F8258 0x000110F9
    mww 0x401F825C 0x000110F9
    mww 0x401F8260 0x000110F9
    mww 0x401F8264 0x000110F9
    mww 0x401F8268 0x000110F9
    mww 0x401F826C 0x000110F9
    mww 0x401F8270 0x000110F9
    mww 0x401F8274 0x000110F9
    mww 0x401F8278 0x000110F9
    mww 0x401F827C 0x000110F9
    mww 0x401F8280 0x000110F9
    mww 0x401F8284 0x000110F9
    mww 0x401F8288 0x000110F9
    mww 0x401F828C 0x000110F9
    mww 0x401F8290 0x000110F9
    mww 0x401F8294 0x000110F9
    mww 0x401F8298 0x000110F9
    mww 0x401F829C 0x000110F9
    mww 0x401F82A0 0x000110F9
    mww 0x401F82A4 0x000110F9
    mww 0x401F82A8 0x000110F9
    # ========================================================
    # Config SDR Controller Registers
    # MCR,BMCR0,BMCR1,BR0 32MB,BR1 32MB,BR2 32MB,BR3 32MB,BR4,BR5,BR5,BR6,BR7,BR8
    #
    mww 0x402F0000 0x10000004
    # mww 0x402F0004 0x000079A8
    mww 0x402F0008 0x00000081
    mww 0x402F000C 0x00000081
    mww 0x402F0010 0x8000001B
    mww 0x402F0014 0x8200001B
    mww 0x402F0018 0x8400001B
    mww 0x402F001C 0x8600001B
    mww 0x402F0020 0x90000021
    mww 0x402F0024 0xA0000019
    mww 0x402F0028 0xA8000017
    mww 0x402F002C 0xA900001B
    mww 0x402F0030 0x00000021
    # IOCR,SEMC_CCSX0 as NOR CE, SEMC_CSX1 as PSRAM CE, SEMC_CSX2 as NAND CE, SEMC_CSX3 as DBI CE.
    mww 0x402F0004 0x000079A8
    # ========================================================
    # SDRAMCR0,SDRAMCR1,SDRAMCR2,SDRAMCR3
    mww 0x402F0040 0x00000F31
    mww 0x402F0044 0x00652922
    mww 0x402F0048 0x00010920
    mww 0x402F004C 0x50210A08
    # DBICR0,DBICR1,IPCR1,IPCR2
    mww 0x402F0080 0x00000021
    mww 0x402F0084 0x00888888
    mww 0x402F0094 0x00000002
    mww 0x402F0098 0x00000000
    # IPCR0,IPCMD, SD_CC_IPREA
    mww 0x402F0090 0x80000000
    mww 0x402F009C 0xA55A000F
    while {[expr {([mrw 0x402F003C] & 0x3 ) == 0}]} { sleep 1 }
    # IPCR0,SD_CC_IAF
    mww 0x402F0090 0x80000000
    mww 0x402F009C 0xA55A000C
    while {[expr {([mrw 0x402F003C] & 0x3 ) == 0}]} { sleep 1 }
    # IPCR0,SD_CC_IAF
    mww 0x402F0090 0x80000000
    mww 0x402F009C 0xA55A000C
    while {[expr {([mrw 0x402F003C] & 0x3 ) == 0}]} { sleep 1 }
    # IPTXDAT,UPCR0,SD_CC_IMS
    mww 0x402F00A0 0x00000033
    mww 0x402F0090 0x80000000
    mww 0x402F009C 0xA55A000A
    while {[expr {([mrw 0x402F003C] & 0x3 ) == 0}]} { sleep 1 }
    # enable sdram self refresh again after initialization done
    mww 0x402F004C 0x50210A09
    echo "SDRAM Init Done"
}

# SBMR2: Bit 25..24:
# BOOT_MODE[1:0]: 00b - Boot From Fuses
#                 01b - Serial Downloader
#                 10b - Internal Boot
#                 11b - Reserved
proc get_boot_mode {} {
	set SRC_SBMR2 [ mrw 0x400F801C ]
	set bootmode [ expr {($SRC_SBMR2 & 0x03000000) >> 24} ]
	return $bootmode
}

# Boot Device: 0000b - Serial NOR boot via FlexSPI
#              001xb - SD boot via uSDHC
#              10xxb - eMMC/MMC boot via uSDHC
#              01xxb - SLC NAND boot via SEMC
#              0001b - Parallel NOR boot via SEMC
#              11xxb - Serial NAND boot via FlexSPI
proc get_boot_device {} {
	set SRC_SBMR1 [ mrw 0x400F8004 ]
	set bootdevice [expr {($SRC_SBMR1 & 0x000000F0) >> 4} ]
	return $bootdevice
}

proc get_reset_vector {} {
	global FLASH_MEMORY_BASE
	set MAX_FLASH_MEMORY_SIZE 0x10000000
	
	set vector_table_addr [ mrw [expr {$FLASH_MEMORY_BASE + 0x1004} ] ]
	if { ($vector_table_addr < $FLASH_MEMORY_BASE) || ($vector_table_addr > ($FLASH_MEMORY_BASE + $MAX_FLASH_MEMORY_SIZE)) } {
		echo "Invalid vector table address: $vector_table_addr"
		return 0
	}
	
	set reset_vector [ mrw [expr {$vector_table_addr + 4}] ]
	return $reset_vector
}

# ------------------------------------------------------------------------------------------------------------------------------------------------


set RESET_INTO_BOOT_ROM	0

#The regular "reset halt" command on i.MXRT will stop the chip at the internal entry point in the boot ROM.
#At this point the internal bootloader has not initialized the peripherals set.
#So normally, we want to instead let the bootloader run and stop when it invokes the entry point of the main program.
#The 'reset_into_boot_rom' command controls this behavior.
#Usage: reset_into_boot_rom 0/1
proc reset_into_boot_rom { flag } {
	global RESET_INTO_BOOT_ROM
	set RESET_INTO_BOOT_ROM $flag
	if { $flag } {
		echo "'reset halt' will now try to stop in the boot ROM"
	} else {
		echo "'reset halt' will now try to stop at the entry point in FLASH"
	}
	
	return ""
}

set FLASH_MEMORY_BASE 0x60000000

proc init_reset { mode } {
	global RESET_INTO_BOOT_ROM
	global PENDING_ENTRY_POINT_ADDRESS
	set PENDING_ENTRY_POINT_ADDRESS 0
	
	if { ($mode eq "run") || $RESET_INTO_BOOT_ROM } {
		return
	}
	
	halt
	wait_halt 1000
	
	set bootmode [ get_boot_mode ]
	set bootdev [ get_boot_device ]
	
	if { $bootmode != 2 } {
		echo "Cannot reset into entry when boot mode is $bootmode"
		return
	}
	
	if { $bootdev != 0 } {
		echo "Cannot reset into entry when boot device is $bootdev"
		return
	}
	
	set entry_point [ get_reset_vector ]
	
	if { $entry_point == 0 } {
		echo "Cannot locate the reset vector in FLASH memory. Make sure FLASH is not empty and FlexSPI is initialized."
		return
	}
	
	set PENDING_ENTRY_POINT_ADDRESS $entry_point
}

#
# Only SWD and SPD supported
#
source [find target/swj-dp.tcl]

if { [info exists CPUTAPID] } {
	set _CPU_SWD_TAPID $CPUTAPID
} else {
	set _CPU_SWD_TAPID 0x0BD11477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPU_SWD_TAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian little -dap $_CHIPNAME.dap

if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x4000
}

$_TARGETNAME configure -work-area-phys 0x20200000 \
                       -work-area-size $_WORKAREASIZE \
                       -work-area-backup 0
					   
$_TARGETNAME configure -event reset-deassert-post {
	global PENDING_ENTRY_POINT_ADDRESS
	set halt_timeout 1000
	
	if { $PENDING_ENTRY_POINT_ADDRESS } {
		wait_halt $halt_timeout
		
		set entry_point_hex [ format "0x%X" $PENDING_ENTRY_POINT_ADDRESS ]
		echo "Found entry point at $entry_point_hex. Setting a temporary breakpoint and resetting..."
		bp $entry_point_hex 2 hw

		resume		
		wait_halt $halt_timeout
		rbp $entry_point_hex		
	}
}

#Using SRST on i.MXRT devices will not get the chip to halt. Doing a system reset on the ARM Cortex level instead works as expected
cortex_m reset_config sysresetreq
reset_config none

#To support FLASH programming on i.MXRT, download the FLASH plugin from https://github.com/sysprogs/flash_drivers and adjust/uncomment the line below:
#flash bank imxrt plugin $FLASH_MEMORY_BASE 0x100000 4 4 $_TARGETNAME flash/IMXRT1050_QSPIFLASH_ROMAPI.elf